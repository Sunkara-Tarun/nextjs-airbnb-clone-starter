/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Tip, // @ts-ignore
  Listing, // @ts-ignore
  User,
} from "@prisma/client";

export class TipServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.TipCountArgs>(
    args: Prisma.SelectSubset<T, Prisma.TipCountArgs>
  ): Promise<number> {
    return this.prisma.tip.count(args);
  }

  async tips<T extends Prisma.TipFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.TipFindManyArgs>
  ): Promise<Tip[]> {
    return this.prisma.tip.findMany(args);
  }
  async tip<T extends Prisma.TipFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.TipFindUniqueArgs>
  ): Promise<Tip | null> {
    return this.prisma.tip.findUnique(args);
  }
  async createTip<T extends Prisma.TipCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.TipCreateArgs>
  ): Promise<Tip> {
    return this.prisma.tip.create<T>(args);
  }
  async updateTip<T extends Prisma.TipUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.TipUpdateArgs>
  ): Promise<Tip> {
    return this.prisma.tip.update<T>(args);
  }
  async deleteTip<T extends Prisma.TipDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.TipDeleteArgs>
  ): Promise<Tip> {
    return this.prisma.tip.delete(args);
  }

  async getListing(parentId: string): Promise<Listing | null> {
    return this.prisma.tip
      .findUnique({
        where: { id: parentId },
      })
      .listing();
  }

  async getUser(parentId: string): Promise<User | null> {
    return this.prisma.tip
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
